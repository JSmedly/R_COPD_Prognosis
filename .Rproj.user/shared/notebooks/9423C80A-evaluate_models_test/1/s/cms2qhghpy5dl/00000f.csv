"0","library(flextable)"
"0","library(officer)"
"0","library(tibble)"
"0","library(stringr)"
"0",""
"0","# Utility function to format sub/super scripts based on ^ or _"
"0","text <- ""X^{2} (Decade)"""
"0","format_sub_super_script <- function(text) {"
"0","  # See this thread for the regex magic. "
"0","  # https://stackoverflow.com/questions/15575221/why-does-strsplit-use-positive-lookahead-and-lookbehind-assertion-matches-differ "
"0","  "
"0","  # Split text at '^' or '_', keeping the character in the right group."
"0","  elements <- strsplit(text, split = ""(?<=.)(?=[\\^\\_])"", perl = TRUE)[[1]]"
"0","  # Create empty holder for formatted elements"
"0","  formatted_elements <- list() #vector(""list"", length = length(elements))"
"0","  for (i in seq_along(elements)) {"
"0","    if (grepl(""\\{.*\\}"", elements[i], perl = TRUE)) {"
"0","      parts <- strsplit(elements[i], split=""\\{|\\}"", perl = TRUE)[[1]]"
"0","      if (length(parts) == 3) { # Pattern: ""^{script} (extra string)"""
"0","        formatted_elements[[length(formatted_elements)+1]] <- "
"0","          if (grepl(""\\^"", parts[1])) as_sup(parts[2]) else as_sub(parts[2])"
"0","        formatted_elements[[length(formatted_elements)+1]] <- parts[3]"
"0","      } else if (length(parts) == 2) { # Pattern: ""^{script}"""
"0","        formatted_elements[[length(formatted_elements)+1]] <- "
"0","          if (grepl(""\\^"", parts[1])) as_sup(parts[2]) else as_sub(parts[2])"
"0","      } else { # Should not get here"
"0","        print(paste(""ERROR:"", elements[i], ""contains weird pattern"")) "
"0","        formatted_elements[[length(formatted_elements)+1]] <- elements[i]"
"0","      }"
"0","    } else { # Element does not contain subscript or superscript"
"0","      formatted_elements[[length(formatted_elements)+1]] <- elements[i]"
"0","    }"
"0","  }"
"0","  # return(as_paragraph(unlist(formatted_elements), sep=""""))"
"0","  return(as_paragraph(list_values=formatted_elements))"
"0","}"
"0",""
"0","formatted <- format_sub_super_script(text)"
